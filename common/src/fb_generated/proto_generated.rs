// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ProtoOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Proto<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Proto<'a> {
  type Inner = Proto<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> Proto<'a> {
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 4;
  pub const VT_MESSAGE_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_MESSAGE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Proto { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ProtoArgs
  ) -> flatbuffers::WIPOffset<Proto<'bldr>> {
    let mut builder = ProtoBuilder::new(_fbb);
    builder.add_timestamp(args.timestamp);
    if let Some(x) = args.message { builder.add_message(x); }
    builder.add_message_type(args.message_type);
    builder.finish()
  }


  #[inline]
  pub fn timestamp(&self) -> i64 {
    self._tab.get::<i64>(Proto::VT_TIMESTAMP, Some(0)).unwrap()
  }
  #[inline]
  pub fn message_type(&self) -> All {
    self._tab.get::<All>(Proto::VT_MESSAGE_TYPE, Some(All::NONE)).unwrap()
  }
  #[inline]
  pub fn message(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Proto::VT_MESSAGE, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_connection(&self) -> Option<Connection<'a>> {
    if self.message_type() == All::Connection {
      self.message().map(Connection::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_publish(&self) -> Option<Publish<'a>> {
    if self.message_type() == All::Publish {
      self.message().map(Publish::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_subscribe(&self) -> Option<Subscribe<'a>> {
    if self.message_type() == All::Subscribe {
      self.message().map(Subscribe::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_request(&self) -> Option<Request<'a>> {
    if self.message_type() == All::Request {
      self.message().map(Request::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_message(&self) -> Option<Message<'a>> {
    if self.message_type() == All::Message {
      self.message().map(Message::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_welcome(&self) -> Option<Welcome<'a>> {
    if self.message_type() == All::Welcome {
      self.message().map(Welcome::init_from_table)
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for Proto<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("timestamp", Self::VT_TIMESTAMP, false)?
     .visit_union::<All, _>("message_type", Self::VT_MESSAGE_TYPE, "message", Self::VT_MESSAGE, false, |key, v, pos| {
        match key {
          All::Connection => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Connection>>("All::Connection", pos),
          All::Publish => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Publish>>("All::Publish", pos),
          All::Subscribe => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Subscribe>>("All::Subscribe", pos),
          All::Request => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Request>>("All::Request", pos),
          All::Message => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Message>>("All::Message", pos),
          All::Welcome => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Welcome>>("All::Welcome", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct ProtoArgs {
    pub timestamp: i64,
    pub message_type: All,
    pub message: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for ProtoArgs {
  #[inline]
  fn default() -> Self {
    ProtoArgs {
      timestamp: 0,
      message_type: All::NONE,
      message: None,
    }
  }
}
pub struct ProtoBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ProtoBuilder<'a, 'b> {
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: i64) {
    self.fbb_.push_slot::<i64>(Proto::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn add_message_type(&mut self, message_type: All) {
    self.fbb_.push_slot::<All>(Proto::VT_MESSAGE_TYPE, message_type, All::NONE);
  }
  #[inline]
  pub fn add_message(&mut self, message: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Proto::VT_MESSAGE, message);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ProtoBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ProtoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Proto<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for Proto<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("Proto");
      ds.field("timestamp", &self.timestamp());
      ds.field("message_type", &self.message_type());
      match self.message_type() {
        All::Connection => {
          if let Some(x) = self.message_as_connection() {
            ds.field("message", &x)
          } else {
            ds.field("message", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        All::Publish => {
          if let Some(x) = self.message_as_publish() {
            ds.field("message", &x)
          } else {
            ds.field("message", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        All::Subscribe => {
          if let Some(x) = self.message_as_subscribe() {
            ds.field("message", &x)
          } else {
            ds.field("message", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        All::Request => {
          if let Some(x) = self.message_as_request() {
            ds.field("message", &x)
          } else {
            ds.field("message", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        All::Message => {
          if let Some(x) = self.message_as_message() {
            ds.field("message", &x)
          } else {
            ds.field("message", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        All::Welcome => {
          if let Some(x) = self.message_as_welcome() {
            ds.field("message", &x)
          } else {
            ds.field("message", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("message", &x)
        },
      };
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_proto<'a>(buf: &'a [u8]) -> Proto<'a> {
  unsafe { flatbuffers::root_unchecked::<Proto<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_proto<'a>(buf: &'a [u8]) -> Proto<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<Proto<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `Proto`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_proto_unchecked`.
pub fn root_as_proto(buf: &[u8]) -> Result<Proto, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Proto>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Proto` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_proto_unchecked`.
pub fn size_prefixed_root_as_proto(buf: &[u8]) -> Result<Proto, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Proto>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Proto` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_proto_unchecked`.
pub fn root_as_proto_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Proto<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Proto<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Proto` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_proto_unchecked`.
pub fn size_prefixed_root_as_proto_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Proto<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Proto<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Proto and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Proto`.
pub unsafe fn root_as_proto_unchecked(buf: &[u8]) -> Proto {
  flatbuffers::root_unchecked::<Proto>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Proto and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Proto`.
pub unsafe fn size_prefixed_root_as_proto_unchecked(buf: &[u8]) -> Proto {
  flatbuffers::size_prefixed_root_unchecked::<Proto>(buf)
}
#[inline]
pub fn finish_proto_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Proto<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_proto_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Proto<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
